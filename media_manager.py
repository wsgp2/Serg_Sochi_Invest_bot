#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–µ–¥–∏–∞-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è Sochi Invest Bot
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ –≤–∏–¥–µ–æ –≤ –±–æ—Ç–µ
"""

from aiogram.types import InputMediaPhoto, InputMediaVideo, FSInputFile
from typing import List, Dict, Any
import os
import logging

logger = logging.getLogger(__name__)

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
VILLA_MEDIA = {
    "villa1": {
        "photos": [
            "media/villa1/photo1.jpg",
            "media/villa1/photo2.jpg", 
            "media/villa1/photo3.jpg",
            "media/villa1/photo4.jpg",
            "media/villa1/photo5.jpg"
        ],
        "videos": [
            "media/villa1/video1.mp4",  # –ì–ª–∞–≤–Ω–æ–µ –≤–∏–¥–µ–æ –¥–Ω—è
            "media/villa1/video2.mp4"   # –í–∏–¥–µ–æ –∑–∞–∫–∞—Ç–∞
        ],
        "video": "media/villa1/video1.mp4",  # –ì–ª–∞–≤–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    },
    "villa2": {
        "photos": [
            "media/villa2/photo1.jpg",
            "media/villa2/photo2.jpg",
            "media/villa2/photo3.jpg", 
            "media/villa2/photo4.jpg",
            "media/villa2/photo5.jpg",
            "media/villa2/photo6.jpg",
            "media/villa2/photo7.jpg"
        ],
        "videos": [
            "media/villa2/video1.mp4",  # –ì–ª–∞–≤–Ω–æ–µ –≤–∏–¥–µ–æ
            "media/villa2/video2.mp4",  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
            "media/villa2/video3.mp4"   # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
        ],
        "video": "media/villa2/video1.mp4",  # –ì–ª–∞–≤–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    },
    "common": {
        "presentation": "media/common/presentation.pdf",
        "location_photos": [
            "media/location/sirius1.jpg",
            "media/location/sirius2.jpg",
            "media/location/sirius3.jpg",
            "media/location/sirius4.jpg"
        ],
        "promo_video": "media/common/promo_video.mp4",
        "concept_video": "media/common/concept_video.mp4",
        "comparison_image": "media/common/comparison.jpg"
    }
}

def create_media_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
    directories = [
        "media/villa1",
        "media/villa2", 
        "media/common",
        "media/location"
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

def get_villa_photos(villa_id: str, max_photos: int = 4) -> List[InputMediaPhoto]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–∏–ª–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ 4 —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)"""
    if villa_id not in VILLA_MEDIA:
        return []
    
    photos = []
    villa_photos = VILLA_MEDIA[villa_id]["photos"][:max_photos]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    
    for i, photo_path in enumerate(villa_photos):
        if os.path.exists(photo_path):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–µ –±–æ–ª—å—à–µ 10MB –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
                file_size = os.path.getsize(photo_path)
                if file_size > 10 * 1024 * 1024:  # 10MB
                    logger.warning(f"–§–∞–π–ª {photo_path} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / 1024 / 1024:.1f}MB")
                    continue
                
                if i == 0:
                    # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                    caption = f"üì∏ –§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è {villa_id.upper()}"
                    photos.append(InputMediaPhoto(
                        media=FSInputFile(photo_path),
                        caption=caption
                    ))
                else:
                    photos.append(InputMediaPhoto(media=FSInputFile(photo_path)))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ {photo_path}: {e}")
        else:
            logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
    
    return photos

def get_remaining_villa_photos(villa_id: str, start_from: int = 4) -> List[InputMediaPhoto]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–∏–ª–ª—ã (–ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö 4)"""
    if villa_id not in VILLA_MEDIA:
        return []
    
    photos = []
    villa_photos = VILLA_MEDIA[villa_id]["photos"][start_from:]
    
    for photo_path in villa_photos:
        if os.path.exists(photo_path):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                file_size = os.path.getsize(photo_path)
                if file_size > 10 * 1024 * 1024:  # 10MB
                    logger.warning(f"–§–∞–π–ª {photo_path} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / 1024 / 1024:.1f}MB")
                    continue
                
                photos.append(InputMediaPhoto(media=FSInputFile(photo_path)))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ {photo_path}: {e}")
        else:
            logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
    
    return photos

def get_villa_video(villa_id: str, video_index: int = 0) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –≤–∏–¥–µ–æ –≤–∏–ª–ª—ã"""
    if villa_id not in VILLA_MEDIA:
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –≤–∏–¥–µ–æ
    if "videos" in VILLA_MEDIA[villa_id] and len(VILLA_MEDIA[villa_id]["videos"]) > video_index:
        video_path = VILLA_MEDIA[villa_id]["videos"][video_index]
    else:
        video_path = VILLA_MEDIA[villa_id]["video"]
    
    if os.path.exists(video_path):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ
        file_size = os.path.getsize(video_path)
        if file_size > 45 * 1024 * 1024:  # 45MB (–ª–∏–º–∏—Ç Telegram 50MB, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å)
            logger.warning(f"–í–∏–¥–µ–æ—Ñ–∞–π–ª {video_path} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / 1024 / 1024:.1f}MB")
            return None
        return video_path
    else:
        logger.warning(f"–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
        return None

def get_all_villa_videos(villa_id: str) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –≤–∏–ª–ª—ã"""
    if villa_id not in VILLA_MEDIA or "videos" not in VILLA_MEDIA[villa_id]:
        return []
    
    videos = []
    for video_path in VILLA_MEDIA[villa_id]["videos"]:
        if os.path.exists(video_path):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ
            file_size = os.path.getsize(video_path)
            if file_size <= 45 * 1024 * 1024:  # 45MB
                videos.append(video_path)
            else:
                logger.warning(f"–í–∏–¥–µ–æ—Ñ–∞–π–ª {video_path} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / 1024 / 1024:.1f}MB")
        else:
            logger.warning(f"–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
    
    return videos

def get_presentation_file() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
    file_path = VILLA_MEDIA["common"]["presentation"]
    if os.path.exists(file_path):
        return file_path
    else:
        logger.warning(f"–§–∞–π–ª –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return None

def get_location_photos() -> List[InputMediaPhoto]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è carousel"""
    photos = []
    location_photos = VILLA_MEDIA["common"]["location_photos"]
    
    captions = [
        "üèõ –ü–æ—é—â–∏–µ —Ñ–æ–Ω—Ç–∞–Ω—ã –°–∏—Ä–∏—É—Å–∞ - –≤ 10 –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –≤–∏–ª–ª",
        "üé¢ –°–æ—á–∏-–ü–∞—Ä–∫ - –∫—Ä—É–ø–Ω–µ–π—à–∏–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∫ –†–æ—Å—Å–∏–∏", 
        "üèí –û–ª–∏–º–ø–∏–π—Å–∫–∏–π –ø–∞—Ä–∫ - –Ω–∞—Å–ª–µ–¥–∏–µ –ò–≥—Ä 2014",
        "üèî –ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞ - –≥–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–µ –∫—É—Ä–æ—Ä—Ç—ã"
    ]
    
    for i, photo_path in enumerate(location_photos):
        if os.path.exists(photo_path):
            try:
                caption = captions[i] if i < len(captions) else ""
                photos.append(InputMediaPhoto(
                    media=FSInputFile(photo_path),
                    caption=caption
                ))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ª–æ–∫–∞—Ü–∏–∏ {photo_path}: {e}")
        else:
            logger.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
    
    return photos

def add_media_file(villa_id: str, media_type: str, file_path: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    if villa_id not in VILLA_MEDIA:
        VILLA_MEDIA[villa_id] = {"photos": [], "video": None}
    
    if media_type == "photo":
        VILLA_MEDIA[villa_id]["photos"].append(file_path)
    elif media_type == "video":
        VILLA_MEDIA[villa_id]["video"] = file_path
    
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –º–µ–¥–∏–∞ —Ñ–∞–π–ª: {villa_id} -> {media_type} -> {file_path}")

def check_media_files() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
    status = {
        "missing_files": [],
        "existing_files": [],
        "total_photos": 0,
        "total_videos": 0,
        "large_files": []
    }
    
    for villa_id, media_data in VILLA_MEDIA.items():
        if isinstance(media_data, dict):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            if "photos" in media_data:
                for photo_path in media_data["photos"]:
                    if os.path.exists(photo_path):
                        file_size = os.path.getsize(photo_path)
                        status["existing_files"].append(photo_path)
                        status["total_photos"] += 1
                        if file_size > 10 * 1024 * 1024:  # 10MB
                            status["large_files"].append(f"{photo_path} ({file_size / 1024 / 1024:.1f}MB)")
                    else:
                        status["missing_files"].append(photo_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ
            if "videos" in media_data:
                for video_path in media_data["videos"]:
                    if os.path.exists(video_path):
                        file_size = os.path.getsize(video_path)
                        status["existing_files"].append(video_path)
                        status["total_videos"] += 1
                        if file_size > 45 * 1024 * 1024:  # 45MB
                            status["large_files"].append(f"{video_path} ({file_size / 1024 / 1024:.1f}MB)")
                    else:
                        status["missing_files"].append(video_path)
    
    return status

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
create_media_directories() 