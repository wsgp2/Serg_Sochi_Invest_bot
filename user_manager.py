#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è Sochi Invest Bot
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""

import json
import os
import logging
from datetime import datetime
from aiogram.types import User
from typing import Dict, Any, List
from config import SERVICE_CHAT_ID

logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "data/users.json"
LEADS_FILE = "data/leads.json"

def ensure_data_directory():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    os.makedirs("data", exist_ok=True)

def load_users() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    ensure_data_directory()
    
    if not os.path.exists(USERS_FILE):
        return {}
    
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {}

def save_users(users_data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    ensure_data_directory()
    
    try:
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def load_leads() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    ensure_data_directory()
    
    if not os.path.exists(LEADS_FILE):
        return {}
    
    try:
        with open(LEADS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–æ–≤: {e}")
        return {}

def save_leads(leads_data: Dict[str, Any]):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –≤ —Ñ–∞–π–ª"""
    ensure_data_directory()
    
    try:
        with open(LEADS_FILE, 'w', encoding='utf-8') as f:
            json.dump(leads_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–¥–æ–≤: {e}")

async def log_user_interaction(user: User, action: str, chat_id: int):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º"""
    users_data = load_users()
    user_id = str(user.id)
    current_time = datetime.now().isoformat()
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in users_data:
        users_data[user_id] = {
            "first_name": user.first_name,
            "last_name": user.last_name,
            "username": user.username,
            "first_interaction": current_time,
            "interactions": [],
            "total_interactions": 0,
            "is_bot": user.is_bot,
            "language_code": user.language_code
        }
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–ª—É–∂–µ–±–Ω—ã–π —á–∞—Ç
        from bot import bot
        try:
            new_user_text = f"""üë§ <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>

üÜî ID: {user.id}
üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üë§ –§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì± Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üó£ –Ø–∑—ã–∫: {user.language_code or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üéØ –ü–µ—Ä–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}"""
            
            await bot.send_message(
                chat_id=SERVICE_CHAT_ID,
                text=new_user_text
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    users_data[user_id]["last_interaction"] = current_time
    users_data[user_id]["total_interactions"] += 1
    users_data[user_id]["interactions"].append({
        "action": action,
        "time": current_time,
        "chat_id": chat_id
    })
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 50 –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    if len(users_data[user_id]["interactions"]) > 50:
        users_data[user_id]["interactions"] = users_data[user_id]["interactions"][-50:]
    
    save_users(users_data)
    logger.info(f"–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({action}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")

async def log_lead(user_id: int, lead_type: str, lead_data: Dict[str, Any]):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–¥–∞ (–∑–∞—è–≤–∫–∏)"""
    leads_data = load_leads()
    lead_id = f"{user_id}_{lead_type}_{int(datetime.now().timestamp())}"
    current_time = datetime.now().isoformat()
    
    leads_data[lead_id] = {
        "user_id": user_id,
        "type": lead_type,
        "data": lead_data,
        "created_at": current_time
    }
    
    save_leads(leads_data)
    logger.info(f"–õ–∏–¥ {lead_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

def get_user_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users_data = load_users()
    leads_data = load_leads()
    
    total_users = len(users_data)
    total_leads = len(leads_data)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().date()
    today_users = 0
    
    for user_data in users_data.values():
        last_interaction = user_data.get("last_interaction")
        if last_interaction:
            interaction_date = datetime.fromisoformat(last_interaction).date()
            if interaction_date == today:
                today_users += 1
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–¥—ã –ø–æ —Ç–∏–ø–∞–º
    pdf_leads = sum(1 for lead in leads_data.values() if lead["type"] == "pdf")
    viewing_leads = sum(1 for lead in leads_data.values() if lead["type"] == "viewing")
    
    return {
        "total_users": total_users,
        "today_users": today_users,
        "total_leads": total_leads,
        "pdf_leads": pdf_leads,
        "viewing_leads": viewing_leads,
        "conversion_rate": round((total_leads / total_users * 100) if total_users > 0 else 0, 2)
    }

def get_recent_users(limit: int = 10) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users_data = load_users()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    sorted_users = sorted(
        users_data.items(),
        key=lambda x: x[1].get("last_interaction", ""),
        reverse=True
    )
    
    recent_users = []
    for user_id, user_data in sorted_users[:limit]:
        recent_users.append({
            "user_id": user_id,
            "name": f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip(),
            "username": user_data.get('username'),
            "last_interaction": user_data.get('last_interaction'),
            "total_interactions": user_data.get('total_interactions', 0)
        })
    
    return recent_users 